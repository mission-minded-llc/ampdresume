generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["ampdresume"]
}

/// Represents a user account from an OAuth provider
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@schema("ampdresume")
}

/// Represents an active session for a user
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("ampdresume")
}

/// Main user model containing profile information and relationships.
/// Used for authentication and storing user-specific data.
model User {
  id              String    @id @default(cuid())
  email           String?   @unique
  name            String?
  emailVerified   DateTime?
  createdAt       DateTime  @default(now())
  /// Used for profile URL
  slug            String?   @unique
  updatedAt       DateTime  @default(now()) @updatedAt
  /// Used for contact email, displayed on profile
  displayEmail    String?
  /// Used for location, displayed on profile. Should be a general value, e.g. City, State
  location        String?
  /// Used for open graph tags. Should be a URL
  siteImage       String?
  /// Used for SEO and open graph tags
  siteTitle       String?
  /// Used for profile title, e.g. "Senior Software Engineer"
  title           String?
  /// Used for SEO and open graph tags
  siteDescription String?
  image           String?

  /// Used for theme name, e.g. "default"
  webThemeName String?
  /// Used for PDF theme name, e.g. "default"
  pdfThemeName String?

  /// All the relations to the user:
  accounts          Account[]
  company           Company[]
  education         Education[]
  sessions          Session[]
  skillForUser      SkillForUser[]
  Social            Social[]
  FeaturedProject   FeaturedProject[]
  Certification     Certification[]
  SkillContribution SkillContribution[]

  @@schema("ampdresume")
}

/// Used for email verification tokens
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@schema("ampdresume")
}

/// Social media links for a user, e.g. "Twitter", "GitHub", "LinkedIn"
model Social {
  id       String @id @default(cuid())
  platform String
  ref      String

  /// The relation to the user that this social is associated with.
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform, ref])
  @@schema("ampdresume")
}

/// Skill is a general skill that can be used by multiple users, e.g. "HTML", "CSS", "JavaScript"
/// Not limited to technical skills. Can be used for any skill, e.g. "Public Speaking", "Leadership"
model Skill {
  id   String  @id @default(cuid())
  /// Ensures skill names are unique
  name String  @unique
  /// Optional icon, e.g., from Iconify
  icon String?

  /// Whether the skill is published to the public. When a user creates a skill, we will set it to
  /// false initially. However, a new skill inserted via migration script will be set to true,
  /// because it's already vetted. Only published skills are visible in the skill search selector.
  published   Boolean   @default(true)
  /// The date the skill was published.
  publishDate DateTime?
  /// The date the skill was last updated.
  updateDate  DateTime  @default(now()) @updatedAt

  /// Used for skills that a user has, with additional customized information.
  /// The custom data is specific to the user's resume. The skill itself is a general skill
  /// that can be used by multiple users.
  skillForUser      SkillForUser[]
  /// Used for skills that a user has contributed to, e.g. "John Doe"
  SkillContribution SkillContribution[]

  @@schema("ampdresume")
}

/// SkillContribution is the record of a user contributing a new skill to the database.
model SkillContribution {
  id String @id @default(cuid())

  /// The date the skill contribution was submitted.
  submitDate DateTime @default(now())

  /// The skill that the user has contributed.
  skillId String
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)

  /// The user that has contributed the skill.
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("ampdresume")
}

/// SkillForUser is a specific skill that a user has, with additional customized information.
/// The custom data is specific to the user's resume. The skill itself is a general skill
/// that can be used by multiple users.
model SkillForUser {
  id          String  @id @default(cuid())
  /// Optional meta about the skill for this user
  description String?
  /// Optional icon, e.g., from Iconify, overrides the icon in Skill if found
  icon        String?
  /// Optional start year of using the skill
  yearStarted Int?
  /// Optional total years using the skill
  totalYears  Int?

  /// The parent skill record.
  skillId String
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
  /// The user that has the skill.
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  /// The relation to the projects that the user has worked on.
  skillForProject         SkillForProject[]
  /// The relation to the featured projects that the user has worked on, where this skill is used.
  SkillForFeaturedProject SkillForFeaturedProject[]

  @@unique([userId, skillId])
  @@schema("ampdresume")
}

/// SkillForProject is a specific skill that a user has for a specific project,
/// with additional customized information. The custom data is specific to the user's resume,
/// within the context of the project.
model SkillForProject {
  id          String  @id @default(cuid())
  /// Optional meta about the skill for this project. Overrides the description in SkillForUser if found
  description String?

  /// The relation to the project that this skill is associated with.
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  /// The relation to the skill that this project has.  
  skillForUserId String
  skillForUser   SkillForUser @relation(fields: [skillForUserId], references: [id], onDelete: Cascade)

  @@unique([skillForUserId, projectId])
  @@schema("ampdresume")
}

/// Project is a project that a user has worked on and is specific to the context within the Company.
/// The project can have multiple skills associated with it.
model Project {
  id               String            @id @default(cuid())
  name             String
  description      String?
  positionId       String
  /// Used for sorting projects
  sortIndex        Int               @default(0)
  /// The relation to the position that this project is associated with.
  position         Position          @relation(fields: [positionId], references: [id], onDelete: Cascade)
  /// The relation to the skills that this project has.
  skillsForProject SkillForProject[]

  @@schema("ampdresume")
}

/// Position is a position that a user has worked in and is specific to the context within the Company.
/// The position can have multiple projects associated with it.
model Position {
  id        String    @id @default(cuid())
  title     String
  startDate DateTime
  endDate   DateTime?
  companyId String
  /// The relation to the company that this position is associated with.
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  /// The relation to the projects that this position has.
  projects  Project[]

  @@schema("ampdresume")
}

/// Company is a company that a user has worked at and is specific to the context within the user's resume.
/// The company can have multiple positions associated with it.
model Company {
  id        String     @id @default(cuid())
  name      String
  location  String
  startDate DateTime
  endDate   DateTime?
  userId    String
  /// The relation to the user that this company is associated with.
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// The relation to the positions that this company has.
  positions Position[]

  @@schema("ampdresume")
}

/// SkillForFeaturedProject is a specific skill that a user has for a specific featured project,
/// with additional customized information. The custom data is specific to the user's resume,
/// within the context of the featured project.
model SkillForFeaturedProject {
  id          String  @id @default(cuid())
  description String?

  /// The relation to the skill that this featured project has.
  skillForUserId String
  skillForUser   SkillForUser @relation(fields: [skillForUserId], references: [id], onDelete: Cascade)

  /// The relation to the featured project that this skill is associated with.
  featuredProjectId String
  featuredProject   FeaturedProject @relation(fields: [featuredProjectId], references: [id], onDelete: Cascade)

  @@schema("ampdresume")
}

/// FeaturedProject is a project that a user has featured on their resume.
/// The project can have multiple skills associated with it. These projects are separate from
/// the projects associated with a company/position. These featured projects are intended to be
/// standalone projects that the user wants to highlight.
model FeaturedProject {
  id                       String                    @id @default(cuid())
  name                     String
  description              String?
  links                    Json
  /// The relation to the user that this featured project is associated with.
  userId                   String
  user                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// The relation to the skills that this featured project has.
  skillsForFeaturedProject SkillForFeaturedProject[]

  @@schema("ampdresume")
}

/// Certification is a certification that a user has earned and is specific to the context within the user's resume.
/// This is different from education in that it may not be from a school, and may not be a degree.
/// It is more of a credential that the user has earned.
model Certification {
  id            String   @id @default(cuid())
  name          String
  issuer        String
  dateAwarded   DateTime
  credentialUrl String?
  credentialId  String?

  /// The relation to the user that this certification is associated with.
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("ampdresume")
}

/// Education is a school that a user has attended and is specific to the context within the user's resume.
/// For multiple degrees from the same school, the user can add multiple education entries.
model Education {
  id          String    @id @default(cuid())
  school      String
  degree      String
  dateAwarded DateTime?

  /// The relation to the user that this education is associated with.
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("ampdresume")
}
