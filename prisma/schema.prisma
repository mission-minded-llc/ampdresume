// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["openresume"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@schema("openresume")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("openresume")
}

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String?        @unique
  emailVerified   DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now()) @updatedAt
  siteTitle       String? // Used for SEO and open graph tags.
  siteDescription String? // Used for SEO and open graph tags.
  siteImage       String? // Used for open graph tags. Should be a URL.
  slug            String?        @unique // Used for profile URL.
  title           String? // Used for profile title, e.g. "Senior Software Engineer"
  displayEmail    String? // Used for contact email, displayed on profile.
  location        String? // Used for location, displayed on profile. Should be a general value, e.g. City, State.
  accounts        Account[] // Linked authentication providers.
  sessions        Session[] // Active sessions.
  skillForUser    SkillForUser[] // One-to-many relationship with SkillForUser, customized skills per user.
  company         Company[] // One-to-many relationship with Company, work experience. Can be multiple companies.
  education       Education[] // One-to-many relationship with Education, education history. Can be multiple schools.
  Social          Social[] // One-to-many relationship with Social, social media links or usernames.

  @@schema("openresume")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@schema("openresume")
}

// Social media links for a user, e.g. "Twitter", "GitHub", "LinkedIn"
model Social {
  id     String @id @default(cuid())
  name   String
  // URL base dpends on the name, e.g. "https://{name}.com/{username}"
  // So, if name is "twitter", and username is "jack", the full URL will be "https://twitter.com/jack"
  // Or if it's LinkedIn, it will be "https://linkedin.com/in/{username}"
  // However, if the name is "website" or "personal", then the URL should be the full URL.
  url    String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@schema("openresume")
}

// Skill is a general skill that can be used by multiple users, e.g. "HTML", "CSS", "JavaScript"
// Not limited to technical skills. Can be used for any skill, e.g. "Public Speaking", "Leadership"
model Skill {
  id           String         @id @default(cuid())
  name         String         @unique // Ensures skill names are unique
  icon         String? // Optional icon, e.g., from Iconify.
  skillForUser SkillForUser[] // One-to-many relationship with SkillForUser

  @@schema("openresume")
}

// SkillForUser is a specific skill that a user has, e.g. "HTML", "CSS", "JavaScript", with additional
// customized information, e.g. description, icon, yearStarted, totalYears. The custom data is specific
// to the user's resume. The skill itself is a general skill that can be used by multiple users.
model SkillForUser {
  id              String            @id @default(cuid())
  skill           Skill             @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId         String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  description     String? // Optional meta about the skill for this user.
  icon            String? // Optional icon, e.g., from Iconify, overrides the icon in Skill if found.
  yearStarted     Int? // Optional start year of using the skill
  totalYears      Int? // Optional total years using the skill
  skillForProject SkillForProject[]

  @@unique([userId, skillId]) // Ensures that a user cannot repeat the same skill
  @@schema("openresume")
}

// SkillForProject is a specific skill that a user has for a specific project, e.g. "HTML", "CSS", "JavaScript",
// with additional customized information, e.g. description. The custom data is specific to the user's resume, within
// the context of the project. The skill itself is a general skill that can be used by multiple users.
model SkillForProject {
  id             String       @id @default(cuid())
  skillForUser   SkillForUser @relation(fields: [skillForUserId], references: [id], onDelete: Cascade)
  skillForUserId String
  description    String? // Optional meta about the skill for this project. Overrides the description in SkillForUser if found.
  project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      String

  @@unique([skillForUserId, projectId]) // Ensures that a user cannot repeat the same skill for the same project
  @@schema("openresume")
}

// Project is a project that a user has worked on, e.g. "Personal Portfolio", "Company Website", and is specific
// to the context within the Company. The project can have multiple skills associated with it, e.g. "HTML", "CSS", "JavaScript".
model Project {
  id               String            @id @default(cuid())
  name             String
  description      String?
  skillsForProject SkillForProject[]
  position         Position          @relation(fields: [positionId], references: [id])
  positionId       String
  sortIndex        Int               @default(0) // Used for sorting projects.

  @@schema("openresume")
}

// Position is a position that a user has worked in, e.g. "Software Engineer", "Product Manager", and is specific
// to the context within the Company. The position can have multiple projects associated with it, e.g. "Personal Portfolio",
// "Company Website".
model Position {
  id        String    @id @default(cuid())
  title     String
  startDate DateTime
  endDate   DateTime?
  projects  Project[]
  company   Company?  @relation(fields: [companyId], references: [id])
  companyId String

  @@schema("openresume")
}

// Company is a company that a user has worked at, e.g. "Google", "Facebook", and is specific to the context within
// the user's resume. The company can have multiple positions associated with it, e.g. "Software Engineer", "Product Manager".
model Company {
  id        String     @id @default(cuid())
  name      String
  location  String
  startDate DateTime
  endDate   DateTime?
  positions Position[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@schema("openresume")
}

// Education is a school that a user has attended, e.g. "Harvard University", "Stanford University", and is specific
// to the context within the user's resume. For multiple degrees from the same school, the user can add multiple education entries.
model Education {
  id          String    @id @default(cuid())
  school      String
  degree      String
  dateAwarded DateTime?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@schema("openresume")
}
