/**
 * Helper file generated by Cursor to help update the skill icons in the CSV file.
 * This file is not part of the project and can be deleted after the icons are updated.
 */
/* eslint-disable no-console */

import { fileURLToPath } from "url";
import fs from "fs";
import path from "path";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// General category mappings
const categoryMappings = [
  {
    keywords: [
      "medical",
      "health",
      "patient",
      "clinic",
      "hospital",
      "doctor",
      "nurse",
      "ehr",
      "emr",
    ],
    icon: "mdi:medical-bag",
  },
  {
    keywords: [
      "design",
      "draw",
      "paint",
      "art",
      "creative",
      "illustration",
      "graphic",
      "cad",
      "sketch",
      "canvas",
    ],
    icon: "mdi:draw",
  },
  {
    keywords: ["database", "data", "storage", "warehouse", "repository"],
    icon: "mdi:database",
  },
  {
    keywords: ["security", "protect", "shield", "guard", "secure", "encrypt", "firewall"],
    icon: "mdi:shield",
  },
  {
    keywords: [
      "chart",
      "analytics",
      "analysis",
      "report",
      "statistics",
      "metrics",
      "graph",
      "visualization",
      "dashboard",
    ],
    icon: "mdi:chart-line",
  },
  {
    keywords: [
      "code",
      "programming",
      "developer",
      "software",
      "application",
      "app",
      "compiler",
      "ide",
      "framework",
      "library",
      "api",
      "script",
    ],
    icon: "mdi:code-braces",
  },
  {
    keywords: ["file", "document", "pdf", "text", "word", "doc"],
    icon: "mdi:file-document",
  },
  {
    keywords: ["image", "photo", "picture", "graphic", "bitmap", "vector"],
    icon: "mdi:image",
  },
  {
    keywords: ["video", "movie", "film", "stream", "animation"],
    icon: "mdi:video",
  },
  {
    keywords: ["audio", "sound", "music", "voice", "speech", "recording"],
    icon: "mdi:music",
  },
  {
    keywords: ["map", "location", "gps", "geographic", "navigation"],
    icon: "mdi:map",
  },
  {
    keywords: ["calendar", "schedule", "appointment", "planner", "agenda"],
    icon: "mdi:calendar",
  },
  {
    keywords: [
      "calculator",
      "math",
      "calculation",
      "compute",
      "mathematical",
      "algebra",
      "calculus",
      "statistics",
      "equation",
      "formula",
      "numeric",
      "arithmetic",
      "ampl",
      "matlab",
      "mathematica",
      "solver",
      "optimization",
    ],
    icon: "mdi:calculator",
  },
  {
    keywords: ["school", "education", "learn", "training", "course", "teach", "student"],
    icon: "mdi:school",
  },
  {
    keywords: ["factory", "manufacturing", "production", "industry", "assembly"],
    icon: "mdi:factory",
  },
  {
    keywords: ["car", "vehicle", "automotive", "transport", "fleet"],
    icon: "mdi:car",
  },
  {
    keywords: ["money", "finance", "banking", "accounting", "payment", "tax", "invoice", "billing"],
    icon: "mdi:cash",
  },
  {
    keywords: ["test", "exam", "quiz", "assessment", "evaluation"],
    icon: "mdi:test-tube",
  },
  {
    keywords: ["network", "connect", "internet", "web", "protocol", "router"],
    icon: "mdi:network",
  },
  {
    keywords: ["server", "host", "cloud", "deployment", "infrastructure"],
    icon: "mdi:server",
  },
  {
    keywords: ["organization", "workflow", "process", "management", "planning", "structure"],
    icon: "mdi:sitemap",
  },
];

// Function to find the most appropriate icon for a skill
function findIcon(skillName) {
  const lowerSkill = skillName.toLowerCase();

  // Check each category
  for (const category of categoryMappings) {
    if (category.keywords.some((keyword) => lowerSkill.includes(keyword))) {
      console.log(`Found icon ${category.icon} for skill ${skillName}`);
      return category.icon;
    }
  }

  console.log(`No specific icon found for skill ${skillName}, using default`);
  return "mdi:file-document";
}

// Read the CSV file
const filePath = path.join(__dirname, "../prisma/seed/skills.csv");
console.log(`Reading file from ${filePath}`);
const content = fs.readFileSync(filePath, "utf8");

// Process each line
const lines = content.split("\n");
console.log(`Processing ${lines.length} lines`);

let updatedCount = 0;
const updatedLines = lines.map((line) => {
  if (!line.trim()) return line;

  const [skill, currentIcon] = line.split(",").map((s) => s.trim());

  // If the line is empty or already has an icon, keep it as is
  if (!skill || currentIcon) {
    return line;
  }

  // Find and apply the appropriate icon
  const icon = findIcon(skill);
  updatedCount++;
  return `${skill},${icon}`;
});

console.log(`Updated ${updatedCount} entries`);

// Write the updated content back to the file
fs.writeFileSync(filePath, updatedLines.join("\n"));
console.log("File has been updated");
